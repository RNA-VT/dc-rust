use core::str;
use anyhow::{Result,bail};
use std::sync::{Arc,Mutex};
use log::info;

use esp_idf_sys as _;

use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    http::server::*,
    sys::ESP_OK,
    sys::{
        nvs_flash_init,
        ESP_ERR_NVS_NO_FREE_PAGES,
        ESP_ERR_NVS_NEW_VERSION_FOUND,
        nvs_flash_erase
    }
};

use esp_idf_hal::{
    peripherals::Peripherals,
    gpio::{
        PinDriver,
        OutputPin
    }
};

use wifi::wifi;
use dc::{SpecificationEndpoint};


#[toml_cfg::toml_config]
struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    // It is necessary to call this function once. Otherwise, some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_hal::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();

    let sysloop = EspSystemEventLoop::take()?;

    info!("I'm a Relay!");

    info!("Initializing NVS");
    nvs_init().expect("Failed to init NVS");

    info!("Connecting to Wi-Fi...");

    // Load Wi-Fi Config
    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    info!("Load Peripherals / GPIO");
    let peripherals = Peripherals::take()?;

    // Connect to the Wi-Fi network
    let _wifi = match wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    ) {
        Ok(inner) => {
            info!("Wi-Fi: Connection Succeeded!");
            inner
        }
        Err(err) => {
            info!("Wi-Fi: Connection Failed.");
            bail!("Could not connect to Wi-Fi network: {:?}", err)
        }
    };



    info!("about to declare pin driver");
    let p = PinDriver::output(peripherals.pins.gpio11.downgrade_output())?;

    info!("about to declare mutex");
    let pin_relay = Arc::new(Mutex::new(p));

    info!("about to declare server");
    let mut server = EspHttpServer::new(&Configuration::default())?;

    info!("about to add endpoints to server");
    server = match dc::server(server, "relay".to_string(), vec![
        SpecificationEndpoint {
            method: String::from("open"),
            parameters: vec![],
        },
        SpecificationEndpoint {
            method: String::from("close"),
            parameters: vec![],
        },
        // Add more endpoints as needed
    ]) {
        Ok(server) => {
            info!("DC Server Successfully Started.");
            server
        }
        Err(_e) => {
            info!("!!!ERROR!!!");
            bail!("DC Server Failed to Start.");
        }
    };

    info!("about to add first handler to server");
    server.fn_handler(
        "/on",
        Method::Post,
        |_request| {
            let mut pin = pin_relay.lock().unwrap();
            match pin.set_low() {
                Ok(()) => {
                    Ok(())
                }
                Err(e) => {
                    info!("Could not set pin state");
                    Err(e)
                }
            }

        }
    ).expect("Failed to create /on Handler");

    info!("about to add second handler to server");
    server.fn_handler(
        "/off",
        Method::Post,
        |_request| {
            let mut pin = pin_relay.lock().unwrap();
            match pin.set_high() {
                Ok(()) => {
                    Ok(())
                }
                Err(e) => {
                    info!("Could not set pin state");
                    Err(e)
                }
            }

        }
    ).expect("Failed to create /off Handler");

    loop {
        info!("Blue!");
        info!("Doing Things!");
        std::thread::sleep(std::time::Duration::from_secs(1));
        info!("Green!");
        std::thread::sleep(std::time::Duration::from_secs(1));

    }
}


fn nvs_init() -> Result<(), EspError> {
    unsafe {
        let mut ret = nvs_flash_init();
        if ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND {
            info!("{}",format_args!("Need to erase flash: rc = {}", ret));
            err(nvs_flash_erase())?;
            ret = nvs_flash_init();
        }
        err(ret)
    }
}

pub fn err(err: i32) -> Result<(), EspError> {
    if err != ESP_OK {
        Err(EspError { code: err })
    } else {
        Ok(())
    }
}

#[derive(Debug)]
pub struct EspError {
    code: i32,
}

impl EspError {
    pub fn code(&self) -> i32 {
        self.code
    }
}

impl From<i32> for EspError {
    fn from(e: i32) -> Self {
        EspError { code: e }
    }
}