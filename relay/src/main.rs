use anyhow::Result;
use core::str;
use embedded_svc::{http::Method, io::Write};
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    hal::{
        i2c::{I2cConfig, I2cDriver},
        prelude::*,
    },
    http::server::{Configuration, EspHttpServer},
};
use shtcx::{self, shtc3, PowerMode};
use std::{
    sync::{Arc, Mutex},
    thread::sleep,
    time::Duration,
};
use log::info;
use wifi::wifi;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()>{
    // It is necessary to call this function once. Otherwise some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_svc::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    info!("Hello, world!");

    info!("Status: Not Connected");

    // Load Wifi Config
    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;


    // Connect to the Wi-Fi network
    let _wifi = match wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    ) {
        Ok(inner) => {
            info!("Status: Connection Succeeded.");
            inner
        },
        Err(err) => {
            info!("Status: Connection Failed.");
            panic!("Could not connect to Wi-Fi network: {:?}", err)
        }
    };

    loop {
        // Blue!
        info!("Blue");
        // Wait...
        info!("Doing things...");
        std::thread::sleep(std::time::Duration::from_secs(1));

        // Green!
        info!("Green");
        // Wait...
        std::thread::sleep(std::time::Duration::from_secs(1));
    }
}
