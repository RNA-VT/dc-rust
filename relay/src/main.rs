use core::str;


use anyhow::{Result,bail};
use esp_idf_svc::{eventloop::EspSystemEventLoop, hal::prelude::*,http::server::*, io::Write};
use log::info;

use wifi::wifi;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    // It is necessary to call this function once. Otherwise, some patches to the runtime
    // implemented by esp-idf-sys might not link properly. See https://github.com/esp-rs/esp-idf-template/issues/71
    esp_idf_svc::sys::link_patches();

    // Bind the log crate to the ESP Logging facilities
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    info!("I'm a Relay!");
    info!("Connecting to Wi-Fi...");

    // Load Wi-Fi Config
    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = match wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    ) {
        Ok(inner) => {
            info!("Wi-Fi: Connection Succeeded!");
            inner
        }
        Err(err) => {
            info!("Wi-Fi: Connection Failed.");
            bail!("Could not connect to Wi-Fi network: {:?}", err)
        }
    };

    // Set the HTTP server
    let mut server = EspHttpServer::new(&Configuration::default())?;
    // http://<sta ip>/ handler
    server.fn_handler("/", Method::Get, |request| {
        let html = index_html();
        let mut response = request.into_ok_response()?;
        response.write_all(html.as_bytes())?;
        Ok(())
    })?;

    loop {
        // Blue!
        info!("Blue");
        info!("Doing things...");
        std::thread::sleep(std::time::Duration::from_secs(1));

        // Green!
        info!("Green");
        // Wait...
        std::thread::sleep(std::time::Duration::from_secs(1));
    }
}

fn templated(content: impl AsRef<str>) -> String {
    format!(
        r#"
<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>esp-rs web server</title>
    </head>
    <body>
        {}
    </body>
</html>
"#,
        content.as_ref()
    )
}

fn index_html() -> String {
    templated("Hello from ESP32-C3!")
}
